[["index.html", "Data analysis using R for Psychology Introduction About the seminar Content of the seminar Note on exercises Why R? Tidyverse versus base R", " Data analysis using R for Psychology Alexander (Sasha) Pastukhov 2020-11-03 Introduction About the seminar This is a material for Applied data analysis for psychology using the open-source software R seminar. Each chapter covers a single seminar, introducing necessary ideas and is accompanied by a notebook with exercises, which you need to complete and submit. The material assumes no foreknowledge of R or programming in general from the reader. Its purpose is to gradually build up your knowledge and introduce to a typical analysis pipeline. It is based on a data that is typical for the field (repeated measures, appearance, accuracy and response time measurements, Likert scale reports, etc.), you are welcome to suggest your own data set for analysis. Even if you already performed the analysis using some other program, it would still be insightful to compare the different ways and, perhaps, you might gain a new insight. Plus, it is more engaging to work on your data. Remember that throughout the seminar you can and should(!) always ask me whenever something is unclear, you do not understand a concept or logic behind certain code. Do not hesitate to write me in the team or (better) directly to me in the chat (in the latter case, the notifications are harder miss and we dont spam others with our conversation). You will need to submit your assignment one day before the next seminar (Tuesday before noon at the latest), so I would have time evaluate it and provide feedback. As a final assignment, you will need to program a full analysis pipi line for a given data set (or, if you want, for your data set). All the necessary steps will be covered by the seminar material. Please inform me, If you require a grade, as then I will create a more specific description for you to have a clear understanding of how the program will be graded. Content of the seminar The ultimate goal of the seminar is to give you tools to perform a complete analysis of a typical psychology research data, including data import and merging, pre-processing, aggregating, plotting, and performing statistical analysis. We will start with very basic R programming concepts (vectors, tables) before proceeding to learn about data import and visualization via the grammar of graphics. Next, we will learn about piping that makes sequential analysis easy to write and read. Then, we will see how combine piping with Tidyverse verbs. Next, we will see how to use, visualize, and report statistical models. Finally, you will learn the power of functional programming that provides ultimate flexibility in R. Note on exercises In many exercises your will be not writing the code but reading and understanding it. Your job in this case is to think like a computer. Your advantage is that computers are very dumb, so instructions for them must be written in very simple, clear, and unambiguous way. This means that, with practice, reading code is easy for a human (well, reading a well-written code is easy, you will eventually encounter spaghetti-code which is easier to rewrite from scratch than to understand). In each case, you simply go through the code line-by-line, doing all computations by hand and writing down values stored in the variables (if there are too many to keep track of). Once you go through the code in this manner, it should be completely transparent for you. No mysteries should remain, you should have no doubts or uncertainty about any(!) line. Moreover, you then can run the code and check that the values you are getting from computer match yours. Any difference means you made a mistake and code is working differently from how you think it does. In any case, if you not 100% sure about any line of code, ask me, so we can go through it together! In a sense, this is the most important programming skill. It is impossible to learn how to write, if you cannot read first! Moreover, when programming you will probably spend more time reading the code and making sure that it works correctly than writing the new code. Thus, use this opportunity to practice and never use the code that you do not understand completely. Thus, there is nothing wrong in using stackoverflow but do make sure you understand the code you copied! Why R? There are many software tools that allow you preprocess, plot, and analyze your data. Some cost money (SPSS, Matlab), some are free just like R (Python, Julia). Moreover, you can replicate all the analysis that we will perform using Python in combination with Jupyter notebooks (for reproducable analysis), Pandas (for Excel-style table) and statmodels (for statistical analysis). However, R in combination with piping and Tidyverse family of packages is optimized for data analysis, making it easy to write simple, powerful and expressive code that is very easy to understand (a huge plus, as you will discover). I will run circles around myself trying to replicate the same analysis in Python or Matlab. In addition, R is loved by mathematicians and statisticians, so it tends to have implementations for all cutting edge methods (my impression is that even Python is lagging behind it in that respect). Tidyverse versus base R I will be teaching what one might call a dialect of R, based on Tidyverse family of packages. R is extremely flexible, making it possible to redefine its own syntax. Because of that Tidyverse-based code is very different from the base R code to the point that it might look like written in a completely different language (which, in a sense, it is). Although Tidyverse, at least in my opinion, is a better way, we will start with base R, so that you will be able to read and understand code written outside of Tidyverse, as it is also very common. "],["getting-started.html", "Getting Started Installing R Installing R-Studio Installing RTools Installing packages Keeping R and packages up-to-date", " Getting Started Installing R Go to r-project.org and download the current stable version of R for your platform. Run the installer, accepting all defaults. The installer will ask you whether you also want the 32-bit version to be installed alongside 64-bit. You probably wont need 32-bit, so if space is at premium you can skip it. Otherwise, it will make very little difference. Installing R-Studio Go to rstudio.com and download RStudio Desktop Free edition for your platform. Install it using defaults. The R-Studio is an integrated development environment for R but you need to install R separately first! The R-Studio will automatically detect latest R that you have and, in case you have several versions of R installed, you will be able to alter that choice. I will explain the necessary details on using R-Studio throughout the seminar but the official cheatsheet is an excellent, compact, and up-to-date source of information. In fact, R Studio has numerous cheatsheets that describe individual packages in a compact form. Installing RTools If you are using Windows, we might need Rtools for building and running some packages. You do not need to install it at the beginning, but when we will need it later, just following the link above, download the latest Rtools version, run the installer using the defaults and follow the instructions on that page to put Rtools on the PATH! (I do not repeat them here, because they might change). Installing packages The real power of R lies in a vast community-driven family of packages suitable for any occasion. The default repository used by R and R-Studio is The Comprehensive R Archive Network (a.k.a. CRAN). It has very strict requirements for submitted packages, which makes it very annoying for the authors but ensures high quality. Most packages are well-documented and come with example data and code. We will use CRAN as a sole source for packages, but there are alternatives, such as Bioconductor that might have a package that is missing at CRAN. The Bioconductor relies on its own package manager, so you will need to consult the latest manual on their website. To install CRAN package you have two alternatives: via command line function or via R-Studio package manager interface (which will call the function for you). In the former case, go to Console tab and type install.packages(\"package-name\"), for example install.packages(\"tidyverse\"), and press Enter. Alternatively, go to Packages tab, click on Install button, enter the package name in the window, which has autocomplete to help you, and press Install. In some cases, R will ask whether you want to install packages from source. In this case, it will grab the source code and compile the package, which takes time and requires RTools. In most cases, you can say No to install a pre-build binary version. The binary version will be slightly outdated but the emphasis is on slightly. Please install the following packages: tidyverse : includes packages from data creation (tibble), reading (readr), wrangling (dplyr, tidyr), plotting (ggplot2). Plus type specific packages (stringr for strings, forcats for factors) and functional programming (purrr). rmarkdown : package for working with RMarkdown notebooks, which will we use to create reproducible analysis. fs : file system utilities. Keeping R and packages up-to-date R and packages are getting constantly improved, so it is a good idea to regularly update them. For packages, you can use Tools / Check for Packages Updates... menu in R-Studio. To update R and, optionally, packages, you can use installr package that can install newest R (but it keeps old version!) optionally copying your entire library of packages, updating packages, etc. For R-Studio itself, use Help / Check for Updates menu and install a newer version, if it is available (it is generally a good idea to keep your R-Studio in the newest state). "],["reproducable-research.html", "Seminar 1 Reproducable Research: Projects and RMarkdown Notebooks 1.1 Projects 1.2 RMarkdown 1.3 Exercise", " Seminar 1 Reproducable Research: Projects and RMarkdown Notebooks Our aim is to create reproducible research and analysis. It is a crucial component of the open science movement but is even more important for your own research or study projects. Doing analysis is easy. The trick is to create a self-contained well-documented easy-to-understand reproducible analysis. An analysis that others and, most importantly, future-you can easily understand saves you time and gives you a deeper insight into the results (less mystery is better in these cases). It also makes it easier to communicate your results to other researchers or fellow students. 1.1 Projects One of the most annoying features of R is that sees files and folders only relative to its working directory, which is set via setwd(dir) function. What makes it particularly confusing, is that your currently open file may be in some other folder. If you simply use File / Open, navigate to that file and open it, it does not change your working directory. Similarly, in R-Studio you can navigate through file system using Files tab and open some folder you are interested in but that does not make it a working directory. You need to click on More and Set As Working Directory to make this work (and that trick wont work for an opened file). In short, you may think that you are working in a particular folder but R will have its own opinion about this. Whenever this happens, it is really confusing and involves a lot of cursing as R cannot find files that you clearly see with your own eyes. To avoid this you should organize any project or seminar as an R Project. It assumes that all the necessary files are in the project folder, which is also the working directory. R Studio has some nice project-based touches as well, like keeping tracking of which files you have open, providing version control, etc. Bottom line, always create a new R-project to organize yourself, even if it involves just a single file to try something out. Remember, Nothing is more permanent than a temporary solution! Which is why you should always write your code, as if it is for a long term project (good style, comprehensible variable names, comments, etc.), otherwise your temporary solution grows into permanent incomprehensible spaghetti code. Let us create a new project for this seminar. Use File / New Project..., which will give you options of creating it in a new directory (you get to come up with a name), using an existing directory (project will be named after that directory), or check it out from remote repository (something we wont talk about just yet). You can do it either way. This will be the project folder for this seminar and you will need to put all notebooks and external data files into that folder. Next time you need to open it, you can use File / Recent Projects menu, File / Open Project... menu, or simply open the &lt;name-of-your-project&gt;.Rproj file in that folder. 1.2 RMarkdown RMarkdown notebooks combine formatted text and illustrations with code. When a notebook is knitted, all the code is ran and its output, such as tables and figures, is inserted into the final document. This allows you to combine the narrative (the background, the methodology, discussion, conclusions, etc.) with the actual code that implements what you described. Importantly, notebooks can be knitted into a variety of formats including HTML, PDF, Word document, EPUB book, etc. Thus, instead of creating plots and tables and saving them into separate files so you can copy-paste them into your Word file (and then redoing it, if something changed, and trying to find the correct code that you used the last time, and wondering why it does not run anymore), you simply knit the notebook and get the current and complete research report, semester work, presentation, etc. Even more importantly, same goes for others, as they also can knit your notebook and generate its latest version in format they need. All your exercises will be based on RMarkdown notebooks, so you need to familiarize yourself with them. We will start by learning the markdown, which is a family of human-oriented markup languages. Markup is a plain text that includes formatting syntax and can be translated into visually formatted text. For example, HTML and LaTeX are markup languages. The advantage of markup is that you do not need a special program to edit it, any plain text editor will suffice. However, you do need a special program to turn this plain text into the document. For example, you need Latex to compile a PDF or a browser to view HTML properly. However, anyone can read your original file even if they do not have Latex, PDF reader, or a browser installed (you do need Word to read a Word file!). Markdown markup language was design to make formatting simple and unobtrusive, so the plain document is easy to read (you can read HTML but it is hardly fun!). It is not as feature-rich as HTML or LaTeX but covers most of your usual needs and is very easy to learn! Create a new markdown file via File / New File / R Markdown... menu. Use Seminar 1 for its title and HTML as default output format. Then you need to save the file (pressing Ctrl + S will suffice) and call the file seminar-01 (R Studio will add .Rmd extension automatically). The file you created is not empty, as R Studio is kind enough to provide a template and example for you. Knit the notebook by clicking on Knit button or pressing Ctrl + Shift + K to see how the properly typeset text will look (it will appear in Viewer tab). Let us go through the default notebook that R Studio created for us. The top part between two sets of --- is a notebook header with various configuration options written in YAML (yes, we have two different languages in one file). title, author, and date should be self-explanatory. output defines what kind of output document knitr will generate. You can specify it by hand (e.g., word_document) or just click on drop down next to Knit button and pick the option you like (we will use the default HTML most of the time). These are sufficient for us but there are numerous other options that you can specify, for example, to enable indexing of headers. You can read about at yihui.org/knitr. The next section is the setup code chunk that specifies default options on how the code chunks are treated by default (executed or not, their output is shown or not, etc.). By default code in chunks is run and its output is shown (echo = TRUE) but you can change this behavior on per-chunk basis by pressing the gear button at the top-right. The setup chunk is also a good place to import your libraries (we will talk about it later) as it is always run before any other chunks (so, even if you forgot to run it to load libraries, R Studio will do this for you). Next, we have plain text with rmarkdown, which gets translated into formatted text when you click on Knit button. You can write like this anywhere outside of code chunks to explain the logic of your analysis. You should write why and how the analysis is performed but leave technical details on programming to the chunk itself, where you can comment the code. Finally, we have our first proper chunk of code (the setup chunk above is a special case). A code chunk is simply the code embedded between ```{r &lt;name of the chunk} and the seconds set of ticks ```. Here r specifies that the code inside is written in R language but you can use other languages such as Python, Stan, or SQL. The name of the chunk is optional but I would recommend to have it, as it reminds you what this code is about and it makes it easier to navigate in large notebooks. In the bottom-left corner, you can see which chunk or section you are currently at and, if you click on it, you can quickly navigate to a different chunk. If chunks are not explicitly named, they will get labels Chunk 1, Chunk 2, etc. making it hard to distinguish them. There are also additional options that you can specify per chunk (whether to run the code, to show the output, what size the figures should be, etc.). Generally we wont need these options but you can get an idea about them by looking at the official manual. You can create a chunk by hand or click on Create chunk drop-down list (in this case, it will create the chunk at the position of the cursor) Finally, you run all the code in the chunk by clicking on Run current chunk button at the top-right corner of the chunk or by pressing Ctrl + Shift + Enter when the you are inside the chunk. However, you can also run just a single line or only selected lines by pressing Ctrl + Enter. The cool thing about RMarkdown in RStudio is that you will see the output of that chunk right below it. This means that you can write you code chunk-by-chunk, ensure that each works as intended and only when knit the entire document. Run the chunks in your notebook to see what I mean. 1.3 Exercise For the todays exercise, I want you to familiarize yourself with markdown. Go to markdownguide.org and look at basic and extended syntax (their cheat sheet is also very good). Write any text you want that uses all the formatting and submit the file to MS Teams. "],["vectors.html", "Seminar 2 Vectors! Vectors everywhere! 2.1 Variables 2.2 Vectors and scalars 2.3 Vector indexes (#vector-index) 2.4 Slicing 2.5 Colon Operator and Sequence Generation 2.6 Working with two vectors 2.7 Wrap up", " Seminar 2 Vectors! Vectors everywhere! Before reading the chapter, please download the exercise notebook, put it into your seminar project folder and open the project. You need both the text and the notebook with exercises to be open, as you will be switching between them. Before we can start programming in R, you need to learn about vectors. This is a key concept in R, so your understanding of it will determine how easy it will be for you to use R. Do all of the exercises and do not hesitate to ask me whenever something is unclear. Remember, you need to master vectors before you can master R! 2.1 Variables In programming, the concept of a variable is often described as a box you can put something in. A box has a name tag on it, which is the name of the variable. Whatever you put in is the value that you store. This putting in concepts is reflected in R syntax number_of_participants &lt;- 10 Here, number_of_participants is the name of the variable (name tag for the box we will be using), 10 is the value you store, and &lt;- means put 10 into variable number_of_participants. If you know other programming languages, you probably expected the usual assignment operator =. Confusingly, you can use it as well, but there are some subtle, yet important, differences in how they operate behind the scenes. We will meet = again when we will be talking about functions and, in particular, Tidyverse way of doing things but for now only use &lt;- operator! 2.2 Vectors and scalars The box metaphor youve just learned, doesnt quite work for R. Historically, R was developed as a language for statistical computing, so it was based on concepts of linear algebra instead of being a normal programming language. This means that the primary data unit in R is a vector, which you may remember from geometry or, hopefully, from linear algebra, as an arrow that goes from 0 to a specific point in space. From computer science point of view, a vector is just a list of numbers (or some other values, as you will learn later). This means that there are no single values in R, there are only vectors of variable length. The special case are vectors of length one, which are called scalars1 (but they are still vectors). With respect to the box metaphor, this means that we always have a box with indexed (numbered) slots in it. A simple assignment makes sure that the box has as many slots as the values you want to put in and stores these values one after another starting with slot #1. So, the example above number_of_participants &lt;- 10 creates a variable with one (1) slot and stores the value in it. But, as noted above, a single value (vector with length of one) is a special case. More generally you write: response &lt;- c(1, 7, 3) Here, you create a variable (box) named response that has three slots in it because you want to store three values. You put values 1, 7, 3 into the slots #1, #2, and #3. The c(1, 7, 3) notation is how you create a vector in R by concatenating (or combining) values2. The figure below illustrates the idea: Building on the box metaphor: If you can store something in a box, you can take it out! In the world of computers it works even better, because rather than taking something out, you just make a copy of that and store this copy somewhere else or to use it to compute things. Minimally, we would like to see what is inside of the box. For this, you can use print function: response &lt;- c(1, 7, 3) print(response) ## [1] 1 7 3 Or, we can make a copy of values in one variable and store them in another: x &lt;- c(3, 6, 9) y &lt;- x print(x) ## [1] 3 6 9 print(y) ## [1] 3 6 9 Here, we create a 3-slot variable x so that we can put in a vector of length 3 created via concatenation c(3, 6, 9). Next, we make a copy of these three values and store them in a different variable y. Importantly, the values in variable x stayed as they were. Take a look at the figure below, which graphically illustrate this: Do exercise #1. Remember, everything is a vector! This means that c(3, 6, 9) does not concatenate numbers, it concatenates three length one vectors (scalars) 3, 6, 9. Thus, concatenation works on longer vectors in exactly the same way: x &lt;- c(1, 2, 3) y &lt;- c(4, 5) print(c(x, y)) ## [1] 1 2 3 4 5 Do exercise #2. Did I mention that everything is a vector? This means that when you are using a function, you are always applying it to (mapping it on) a vector. This, in turn, means that you apply the function to all values in one go. For example, you can compute a cosine of all values in the vector. cos(c(0, pi/4, pi/2, pi, -pi)) ## [1] 1.000000e+00 7.071068e-01 6.123032e-17 -1.000000e+00 -1.000000e+00 In contrast, in Python or C, you would need to loop over the values and compute the cosine for one value at a time (matrix-based NumPy library is a different story). Or think about Excel, where you need to extend formula over the rows but each row is computed independently (so you can deliberately or accidentally miss some rows). In R, because everything is the vector, the function is applied to every value automatically. Similarly, if you are using aggregating functions, such as mean() and max(), you can pass a vector and it will return a length-one vector with the value. mean(c(1, 2, 6, 9)) ## [1] 4.5 2.3 Vector indexes (#vector-index) A vector is an ordered list of one or more values (box with one or more slots) and, sometimes, you need only one of the values. Each value (slot in the box) has its own index from 1 till N, where N is the length of the vector. To access that slot you use square brackets some_vector[index]. You can both get and set the value for the individual slots the same way you do it for the whole vector. x &lt;- c(1, 2, 3) # set SECOND element to 4 x[2] &lt;- 4 # print the entire vector print(x) ## [1] 1 4 3 # print only the third element print(x[3]) ## [1] 3 Do exercise 3. Unfortunately, vector indexing in R behaves in a way that may catch you by surprise. If your vectors contains five values, you would expect that index of 0 (negative indexes are discussed below) or above 5 generates an error. Not in R! Index of 0 is a special case and produces an empty vector (vector of zero length). x &lt;- c(1, 2, 3) x[0] ## numeric(0) If you try to get vector element using index that is larger than vector length (so 6 and above, if your vector length is 5), R will return NA (Not Available / Missing Value). x &lt;- c(1, 2, 3) x[5] ## [1] NA In both cases, it wont generate an error or even warn you! When setting the value by index, using 0 will produce no effect, because you are trying to put a value in a vector with no slots. Oddly enough, this will generate neither an error nor a warning, so beware! x &lt;- c(1, 2, 3) x[0] &lt;- 5 print(x) ## [1] 1 2 3 If you set an element those index is larger than vector length, the vector will be automatically expanded to that length and all the elements between the old values and the new one will be NA. x &lt;- c(1, 2, 3) x[10] &lt;- 5 print(x) ## [1] 1 2 3 NA NA NA NA NA NA 5 This may sound too technical but I want you learn about this because R conventions are so different from other programming languages and, also, from you would expect in general. If you are not aware of these highly peculiar rules, you may never realize that your code is not working properly because you will never see an error or even a warning! It should also make you more cautious and careful when programming in R. It is a very powerful language that allows you to be very flexible and expressive. Unfortunately, that flexibility means that base R wont stop you from shooting yourself in a foot. Even worse, sometimes you wont even notice that your foot is shot because R wont generate either errors or warnings, as in example above. Good news is that things are far more restricted and consistent in Tidyverse. Do exercise #4. Finally, you can use negative indexes. In that case, you exclude the value with that index and return or modify the rest. x &lt;- c(1, 2, 3, 4, 5) # this will return all elements but #3 x[-3] ## [1] 1 2 4 5 x &lt;- c(1, 2, 3, 4, 5) # this will assign new value (by repeating length one vector) to all elements but #2 x[-2] &lt;- 10 x ## [1] 10 2 10 10 10 Given that negative indexing returns everything but the indexed value, what do you think will happen here? Do exercise #5. x &lt;- c(10, 20, 30, 40, 50) x[-10] 2.4 Slicing So far we were reading or modifying either the whole vector or just one of its elements. However, the index you pass in square brackets (youve guess it!) is also a vector! Which means that you can construct a vector of indexes the same way you construct a vector of any values (the only restriction is that index values must integers and that you cannot mix negative and positive indexes). x &lt;- c(10, 20, 30, 40, 50) x[c(2, 3, 5)] ## [1] 20 30 50 When constructing a vector index, you can put the index values in the order you require (starting from the end of it, random order, etc.) or use the same index more than once. x &lt;- c(10, 20, 30, 40, 50) x[c(3, 5, 1, 1, 4)] ## [1] 30 50 10 10 40 You can also use several negative indexes to exclude multiple values and return the rest. Here, neither order nor the duplicate indexes matter. Regardless of which value you exclude first or how many times you exclude it, you still get the rest of the vector in its default order. x &lt;- c(10, 20, 30, 40, 50) x[c(-4, -2, -2)] ## [1] 10 30 50 Note that you cannot mix positive and negative indexes as R will generate an error (at last!). x &lt;- c(10, 20, 30, 40, 50) # THIS WILL GENERATE AN ERROR: # &quot;Error in x[c(-4, 2, -2)] : only 0&#39;s may be mixed with negative subscripts&quot; x[c(-4, 2, -2)] Finally, including zero index makes no difference but generates neither an error nor a warning. x &lt;- c(10, 20, 30, 40, 50) x[c(1, 0, 5, 0, 0, 2, 2)] ## [1] 10 50 20 20 2.5 Colon Operator and Sequence Generation To simplify vector indexing, R provides you with a shortcut to create a range of values. An expression A:B (a.k.a.Colon Operator) builds a sequence of integers starting with A and ending with and including(!) B (the latter is not so obvious, if you come from Python). 3:7 ## [1] 3 4 5 6 7 Thus, you can use it to easily create an index and, because everything is a vector!, combine it with other values. x &lt;- c(10, 20, 30, 40, 50) x[c(1, 3:5)] ## [1] 10 30 40 50 The sequence above is increasing but you can also use the colon operator to construct a decreasing one. x &lt;- c(10, 20, 30, 40, 50) x[c(5:2)] ## [1] 50 40 30 20 The colon operator is limited to sequences with steps of 1 (if end value is larger than the start value) or -1 (if end value is smaller than the start value). For more flexibility you can use Sequence Generation function: seq(from, to, by, length.out). The from and to are starting and ending values (just like in the colon operator) and you can specify either a step via by parameter (as, in from A to B by C) or via length.out parameter (how many values you want to generate, effectively by = ((to - from)/(length.out - 1)). Using by version: seq(1, 5, by=2) ## [1] 1 3 5 Same sequence but using length.out version: seq(1, 5, length.out=3) ## [1] 1 3 5 You have probably spotted the = symbol. Here, it is not an assignment but is used to specify values of parameters when you call a function. Thus, we are still sticking with &lt;- outside of the function calls but are using = inside the function calls. Do exercise #6. 2.6 Working with two vectors You can also use mathematical operations on several vectors. Here, the vectors are matched element-wise. Thus, if you add two vectors of equal length, the first element of the first vector is added to the first element of the second vector, second element to second, etc. x &lt;- c(1, 4, 5) y &lt;- c(2, 7, -3) print(x + y) ## [1] 3 11 2 Do exercise to #7. What if vectors are of different length? If the length of the longer vector is a multiple of the shorter vector length, the shorter vector is repeated N-times (where \\(N = length(longer~vector) / length(shorter~vector)\\)) and this length-matched vector is then used for the mathematical operation. Take a look at the results of the following computation x &lt;- 1:6 y &lt;- c(2, 3) print(x + y) ## [1] 3 5 5 7 7 9 Here, the values of y were repeated three times to match the length of x, so the actual computation was c(1, 2, 3, 4, 5, 6) + c(2, 3, 2, 3, 2, 3). A vector of length 1 (scalar) is a special case because any integer is a multiple of 1, so that single value is repeated length(longer_vector) times before the operation is performed. x &lt;- 1:6 y &lt;- 2 print(x + y) ## [1] 3 4 5 6 7 8 Again, the actual computation is c(1, 2, 3, 4, 5, 6) + c(2, 2, 2, 2, 2, 2). If the length of the longer vector is not a multiple of the shorter vector length, R will repeat the shorter vector N times, so that \\(N = ceiling(length(longer~vector) / length(shorter~vector))\\) (where ceiling() rounds a number up) and truncates (throws away) extra elements it does not need. Although R will do it, it will also issue a warning about mismatching objects (vectors) lengths. x &lt;- c(2, 3) y &lt;- c(1, 1, 1, 1, 1) print(x + y) ## Warning in x + y: longer object length is not a multiple of shorter object ## length ## [1] 3 4 3 4 3 Finally, combining any vector with null length vector produces a null length vector. x &lt;- c(2, 3) y &lt;- c(1, 1, 1, 1, 1) print(x + y[0]) ## numeric(0) One thing to keep in mind: R does this length-matching-via-vector-repetition automatically and shows a warning only if two lengths are not multiples of each other. This means that vectors will be matched by length even if that was not your plan. E.g, imagine that your vector that contains experimental condition (e.g. contrast of the stimulus) is about all ten blocks that participants performed but your vector with responses is, accidentally, only on block #1. R will silently(!) replicate the responses 10 times to match their length without ever telling you to watch out. Thus, do make sure that your vectors are matched in their length, so that you are not caught surprised by this behavior (you can use function length() for this). Good news, it is much more strict in Tidyverse, which is designed to make shooting yourself in the foot much harder. Do exercise #8. 2.7 Wrap up By now you have learned more about vectors, vector indexing, and vector operations in R than you probably bargained for. Admittedly, not the most exciting topic. On top of that, there was not a single word on psychology, data analysis, or statistics. However, R is obsessed with vectors (everything is a vector!) and understanding them will make it easier to understand lists (a polyamorous cousin of a vector), tables (special lists of vectors) and functional programming. Finish this seminar by doing remaining exercises. Lets see whether R can still surprise you! Multiplication of a vector by another vector transforms it but for a single element vector the only transformation you can get is scaling, hence, the name. I find this to be a poor choice of name but we are stuck with, so get used to it. "]]
